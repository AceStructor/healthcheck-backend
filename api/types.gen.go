// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package api

import (
	"encoding/json"
	"errors"
	"time"

	"github.com/oapi-codegen/runtime"
)

const (
	ApiKeyAuthScopes = "ApiKeyAuth.Scopes"
)

// Defines values for ConfigBaseType.
const (
	ConfigBaseTypeDns  ConfigBaseType = "dns"
	ConfigBaseTypeHttp ConfigBaseType = "http"
	ConfigBaseTypeTcp  ConfigBaseType = "tcp"
)

// Defines values for DnsConfigRecordType.
const (
	A     DnsConfigRecordType = "A"
	AAAA  DnsConfigRecordType = "AAAA"
	CNAME DnsConfigRecordType = "CNAME"
	MX    DnsConfigRecordType = "MX"
	SRV   DnsConfigRecordType = "SRV"
	TXT   DnsConfigRecordType = "TXT"
)

// Defines values for DnsConfigType.
const (
	DnsConfigTypeDns  DnsConfigType = "dns"
	DnsConfigTypeHttp DnsConfigType = "http"
	DnsConfigTypeTcp  DnsConfigType = "tcp"
)

// Defines values for HttpConfigType.
const (
	HttpConfigTypeDns  HttpConfigType = "dns"
	HttpConfigTypeHttp HttpConfigType = "http"
	HttpConfigTypeTcp  HttpConfigType = "tcp"
)

// Defines values for TcpConfigType.
const (
	TcpConfigTypeDns  TcpConfigType = "dns"
	TcpConfigTypeHttp TcpConfigType = "http"
	TcpConfigTypeTcp  TcpConfigType = "tcp"
)

// Defines values for GetResultsParamsOrderdirection.
const (
	Asc  GetResultsParamsOrderdirection = "asc"
	Desc GetResultsParamsOrderdirection = "desc"
)

// Config defines model for Config.
type Config struct {
	union json.RawMessage
}

// ConfigBase defines model for ConfigBase.
type ConfigBase struct {
	CreatedAt       *time.Time     `json:"createdAt,omitempty"`
	Disabled        bool           `json:"disabled"`
	Id              int64          `json:"id"`
	IntervalSeconds int            `json:"intervalSeconds"`
	LastChecked     *time.Time     `json:"lastChecked,omitempty"`
	Name            string         `json:"name"`
	Target          string         `json:"target"`
	Type            ConfigBaseType `json:"type"`
}

// ConfigBaseType defines model for ConfigBase.Type.
type ConfigBaseType string

// DnsConfig defines model for DnsConfig.
type DnsConfig struct {
	CreatedAt       *time.Time           `json:"createdAt,omitempty"`
	Disabled        bool                 `json:"disabled"`
	DnsServer       *string              `json:"dnsServer,omitempty"`
	ExpectIP        *string              `json:"expectIP,omitempty"`
	Id              int64                `json:"id"`
	IntervalSeconds int                  `json:"intervalSeconds"`
	LastChecked     *time.Time           `json:"lastChecked,omitempty"`
	Name            string               `json:"name"`
	RecordType      *DnsConfigRecordType `json:"recordType,omitempty"`
	Target          string               `json:"target"`
	Type            DnsConfigType        `json:"type"`
}

// DnsConfigRecordType defines model for DnsConfig.RecordType.
type DnsConfigRecordType string

// DnsConfigType defines model for DnsConfig.Type.
type DnsConfigType string

// Error defines model for Error.
type Error struct {
	// Code Error code
	Code *int64 `json:"code,omitempty"`

	// Message Error message
	Message string `json:"message"`
}

// HttpConfig defines model for HttpConfig.
type HttpConfig struct {
	CreatedAt       *time.Time         `json:"createdAt,omitempty"`
	Disabled        bool               `json:"disabled"`
	ExpectStatus    *int               `json:"expectStatus,omitempty"`
	Headers         *map[string]string `json:"headers,omitempty"`
	Id              int64              `json:"id"`
	IntervalSeconds int                `json:"intervalSeconds"`
	LastChecked     *time.Time         `json:"lastChecked,omitempty"`
	Method          *string            `json:"method,omitempty"`
	Name            string             `json:"name"`
	Target          string             `json:"target"`
	Timeout         *int               `json:"timeout,omitempty"`
	Type            HttpConfigType     `json:"type"`
}

// HttpConfigType defines model for HttpConfig.Type.
type HttpConfigType string

// Result defines model for Result.
type Result struct {
	CheckedAt    time.Time `json:"checked_at"`
	Name         string    `json:"name"`
	ResponseTime time.Time `json:"response_time"`
	Status       bool      `json:"status"`
	Target       string    `json:"target"`
	Text         string    `json:"text"`
	Type         string    `json:"type"`
}

// TcpConfig defines model for TcpConfig.
type TcpConfig struct {
	CreatedAt       *time.Time    `json:"createdAt,omitempty"`
	Disabled        bool          `json:"disabled"`
	Id              int64         `json:"id"`
	IntervalSeconds int           `json:"intervalSeconds"`
	LastChecked     *time.Time    `json:"lastChecked,omitempty"`
	Name            string        `json:"name"`
	Port            *int          `json:"port,omitempty"`
	Target          string        `json:"target"`
	Timeout         *int          `json:"timeout,omitempty"`
	Type            TcpConfigType `json:"type"`
}

// TcpConfigType defines model for TcpConfig.Type.
type TcpConfigType string

// GetResultsParams defines parameters for GetResults.
type GetResultsParams struct {
	// Query Search string to match against name, type, target, or result text
	Query *string `form:"query,omitempty" json:"query,omitempty"`

	// Limit Maximum number of results to return
	Limit *int32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Number of results to skip before starting to return data
	Offset *int32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Orderby Field name to order results by
	Orderby *string `form:"orderby,omitempty" json:"orderby,omitempty"`

	// Orderdirection Order direction (ascending or descending)
	Orderdirection *GetResultsParamsOrderdirection `form:"orderdirection,omitempty" json:"orderdirection,omitempty"`
}

// GetResultsParamsOrderdirection defines parameters for GetResults.
type GetResultsParamsOrderdirection string

// CreateConfigJSONRequestBody defines body for CreateConfig for application/json ContentType.
type CreateConfigJSONRequestBody = Config

// UpdateConfigJSONRequestBody defines body for UpdateConfig for application/json ContentType.
type UpdateConfigJSONRequestBody = Config

// AsHttpConfig returns the union data inside the Config as a HttpConfig
func (t Config) AsHttpConfig() (HttpConfig, error) {
	var body HttpConfig
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromHttpConfig overwrites any union data inside the Config as the provided HttpConfig
func (t *Config) FromHttpConfig(v HttpConfig) error {
	v.Type = "HttpConfig"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeHttpConfig performs a merge with any union data inside the Config, using the provided HttpConfig
func (t *Config) MergeHttpConfig(v HttpConfig) error {
	v.Type = "HttpConfig"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsTcpConfig returns the union data inside the Config as a TcpConfig
func (t Config) AsTcpConfig() (TcpConfig, error) {
	var body TcpConfig
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTcpConfig overwrites any union data inside the Config as the provided TcpConfig
func (t *Config) FromTcpConfig(v TcpConfig) error {
	v.Type = "TcpConfig"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTcpConfig performs a merge with any union data inside the Config, using the provided TcpConfig
func (t *Config) MergeTcpConfig(v TcpConfig) error {
	v.Type = "TcpConfig"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsDnsConfig returns the union data inside the Config as a DnsConfig
func (t Config) AsDnsConfig() (DnsConfig, error) {
	var body DnsConfig
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDnsConfig overwrites any union data inside the Config as the provided DnsConfig
func (t *Config) FromDnsConfig(v DnsConfig) error {
	v.Type = "DnsConfig"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDnsConfig performs a merge with any union data inside the Config, using the provided DnsConfig
func (t *Config) MergeDnsConfig(v DnsConfig) error {
	v.Type = "DnsConfig"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t Config) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t Config) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "DnsConfig":
		return t.AsDnsConfig()
	case "HttpConfig":
		return t.AsHttpConfig()
	case "TcpConfig":
		return t.AsTcpConfig()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t Config) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Config) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}
