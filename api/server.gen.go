// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Read all active configs
	// (GET /configs)
	GetConfigs(w http.ResponseWriter, r *http.Request)
	// Write a new config
	// (POST /configs)
	CreateConfig(w http.ResponseWriter, r *http.Request)
	// Disable config
	// (DELETE /configs/{id})
	DisableConfig(w http.ResponseWriter, r *http.Request, id int64)
	// Update config
	// (PATCH /configs/{id})
	UpdateConfig(w http.ResponseWriter, r *http.Request, id int64)
	// Get monitoring results
	// (GET /results)
	GetResults(w http.ResponseWriter, r *http.Request, params GetResultsParams)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Read all active configs
// (GET /configs)
func (_ Unimplemented) GetConfigs(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Write a new config
// (POST /configs)
func (_ Unimplemented) CreateConfig(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Disable config
// (DELETE /configs/{id})
func (_ Unimplemented) DisableConfig(w http.ResponseWriter, r *http.Request, id int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update config
// (PATCH /configs/{id})
func (_ Unimplemented) UpdateConfig(w http.ResponseWriter, r *http.Request, id int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get monitoring results
// (GET /results)
func (_ Unimplemented) GetResults(w http.ResponseWriter, r *http.Request, params GetResultsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetConfigs operation middleware
func (siw *ServerInterfaceWrapper) GetConfigs(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetConfigs(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateConfig operation middleware
func (siw *ServerInterfaceWrapper) CreateConfig(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateConfig(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DisableConfig operation middleware
func (siw *ServerInterfaceWrapper) DisableConfig(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DisableConfig(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateConfig operation middleware
func (siw *ServerInterfaceWrapper) UpdateConfig(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateConfig(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetResults operation middleware
func (siw *ServerInterfaceWrapper) GetResults(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetResultsParams

	// ------------- Optional query parameter "query" -------------

	err = runtime.BindQueryParameter("form", true, false, "query", r.URL.Query(), &params.Query)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "query", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	// ------------- Optional query parameter "orderby" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderby", r.URL.Query(), &params.Orderby)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "orderby", Err: err})
		return
	}

	// ------------- Optional query parameter "orderdirection" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderdirection", r.URL.Query(), &params.Orderdirection)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "orderdirection", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetResults(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/configs", wrapper.GetConfigs)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/configs", wrapper.CreateConfig)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/configs/{id}", wrapper.DisableConfig)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/configs/{id}", wrapper.UpdateConfig)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/results", wrapper.GetResults)
	})

	return r
}

type GetConfigsRequestObject struct {
}

type GetConfigsResponseObject interface {
	VisitGetConfigsResponse(w http.ResponseWriter) error
}

type GetConfigs200JSONResponse []Config

func (response GetConfigs200JSONResponse) VisitGetConfigsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetConfigs500JSONResponse Error

func (response GetConfigs500JSONResponse) VisitGetConfigsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateConfigRequestObject struct {
	Body *CreateConfigJSONRequestBody
}

type CreateConfigResponseObject interface {
	VisitCreateConfigResponse(w http.ResponseWriter) error
}

type CreateConfig201JSONResponse Config

func (response CreateConfig201JSONResponse) VisitCreateConfigResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateConfig400JSONResponse Error

func (response CreateConfig400JSONResponse) VisitCreateConfigResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateConfig500JSONResponse Error

func (response CreateConfig500JSONResponse) VisitCreateConfigResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DisableConfigRequestObject struct {
	Id int64 `json:"id"`
}

type DisableConfigResponseObject interface {
	VisitDisableConfigResponse(w http.ResponseWriter) error
}

type DisableConfig204Response struct {
}

func (response DisableConfig204Response) VisitDisableConfigResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DisableConfig404JSONResponse Error

func (response DisableConfig404JSONResponse) VisitDisableConfigResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DisableConfig500JSONResponse Error

func (response DisableConfig500JSONResponse) VisitDisableConfigResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type UpdateConfigRequestObject struct {
	Id   int64 `json:"id"`
	Body *UpdateConfigJSONRequestBody
}

type UpdateConfigResponseObject interface {
	VisitUpdateConfigResponse(w http.ResponseWriter) error
}

type UpdateConfig200JSONResponse Config

func (response UpdateConfig200JSONResponse) VisitUpdateConfigResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateConfig400JSONResponse Error

func (response UpdateConfig400JSONResponse) VisitUpdateConfigResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdateConfig404JSONResponse Error

func (response UpdateConfig404JSONResponse) VisitUpdateConfigResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateConfig500JSONResponse Error

func (response UpdateConfig500JSONResponse) VisitUpdateConfigResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetResultsRequestObject struct {
	Params GetResultsParams
}

type GetResultsResponseObject interface {
	VisitGetResultsResponse(w http.ResponseWriter) error
}

type GetResults200JSONResponse []Result

func (response GetResults200JSONResponse) VisitGetResultsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetResults400JSONResponse Error

func (response GetResults400JSONResponse) VisitGetResultsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetResults500JSONResponse Error

func (response GetResults500JSONResponse) VisitGetResultsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Read all active configs
	// (GET /configs)
	GetConfigs(ctx context.Context, request GetConfigsRequestObject) (GetConfigsResponseObject, error)
	// Write a new config
	// (POST /configs)
	CreateConfig(ctx context.Context, request CreateConfigRequestObject) (CreateConfigResponseObject, error)
	// Disable config
	// (DELETE /configs/{id})
	DisableConfig(ctx context.Context, request DisableConfigRequestObject) (DisableConfigResponseObject, error)
	// Update config
	// (PATCH /configs/{id})
	UpdateConfig(ctx context.Context, request UpdateConfigRequestObject) (UpdateConfigResponseObject, error)
	// Get monitoring results
	// (GET /results)
	GetResults(ctx context.Context, request GetResultsRequestObject) (GetResultsResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHttpHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHttpMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// GetConfigs operation middleware
func (sh *strictHandler) GetConfigs(w http.ResponseWriter, r *http.Request) {
	var request GetConfigsRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetConfigs(ctx, request.(GetConfigsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetConfigs")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetConfigsResponseObject); ok {
		if err := validResponse.VisitGetConfigsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateConfig operation middleware
func (sh *strictHandler) CreateConfig(w http.ResponseWriter, r *http.Request) {
	var request CreateConfigRequestObject

	var body CreateConfigJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateConfig(ctx, request.(CreateConfigRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateConfig")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateConfigResponseObject); ok {
		if err := validResponse.VisitCreateConfigResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DisableConfig operation middleware
func (sh *strictHandler) DisableConfig(w http.ResponseWriter, r *http.Request, id int64) {
	var request DisableConfigRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DisableConfig(ctx, request.(DisableConfigRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DisableConfig")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DisableConfigResponseObject); ok {
		if err := validResponse.VisitDisableConfigResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateConfig operation middleware
func (sh *strictHandler) UpdateConfig(w http.ResponseWriter, r *http.Request, id int64) {
	var request UpdateConfigRequestObject

	request.Id = id

	var body UpdateConfigJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateConfig(ctx, request.(UpdateConfigRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateConfig")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateConfigResponseObject); ok {
		if err := validResponse.VisitUpdateConfigResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetResults operation middleware
func (sh *strictHandler) GetResults(w http.ResponseWriter, r *http.Request, params GetResultsParams) {
	var request GetResultsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetResults(ctx, request.(GetResultsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetResults")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetResultsResponseObject); ok {
		if err := validResponse.VisitGetResultsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xY227bOBN+FYL/f9ECauy22UUhYC/ctNsGPQVJdrdAEBS0OIrZUiRLjtIaht59wYNs",
	"y5IdB9tmc7FXPnDO882noRa00JXRChQ6mi+oK2ZQsfD1SKtSXPlvXLjCikoohtr6P4zVBizO37MKaE5x",
	"boA2GdUKPpQ0v1jQ/1soaU7/N1pZHyXTo9eIJtlust2i58W+ki+UayUvmyzF/pw5GIy/YsYIFXNT7mab",
	"GZ0hmj0SyigWZp9stpUw/S0gtKCwwBD4BP2PUtuKIc0pZwiPUFTg3Xm9nDq0Pp8m87myqQTuNdLhVGsJ",
	"TPlTwTuWhMJfD1dWhEK4AhsEFYK9ZvIMCq24W7O2JiSZw6MZFF+A7x+gCgkv+gfI7BXg8FH4Y0FB1RXN",
	"L2I3Yq2z0MHLnqMmoxa+1sL62C584sl1klz66+e6VsSVXT39DAX6YFawyBeUSbkH5Nfg6IHcbTJX7gzs",
	"NdjB1OG7gQKPTwYPLRTa8vON6kxoRieTif84ej9595Jm9N1HmtGz0z9pRs8/ng+XayNRP0Yvre0MfAtL",
	"zeNcgZ8rg0IrmkdhEs6yfSBWgXPsaquh9vimzrZyQ61am8wf06vYjTNkWG+ZiRkwDjYcMs6FT4nJk46R",
	"LfBei7sCnGk+LCsq0DUOOR/u4Sm4WuJAE+PgfmJ4+9mthHoL6gpnNH+SDcHSGa0cfAp29rbuNsu6Rly7",
	"yAG+72aNndFuoGkLRaTQkrPNDLP1Yg7hcMX8PwaGRlscht8t4eGrDkVtBc7PvONofmLEG5hPal+xBRV+",
	"JiOsWw7N6cdHk5PjR29gvmokC1q0acLjo9QhBoHSn70GJnEWqkQmJ8c0o9dgXRz3xwfjg3FYHwwoZgTN",
	"6dOD8cFTmlHDcBYiGhWhHOF7wkGXM04Ba6scYVISVqC4BhJVasu8iCMPvs3AAmmpnfxGSiYdPDygwXMU",
	"O+Y0p68Aj5K7VaeD6yfjceQ/haBCFMwYKYqgO/rsfCjtDhVKh1AFxZs7vcYDzFqW6thN8q1wSHTZTdB5",
	"zV9uGdiueCLpD7g/9s9JxSRx4XFFIAlm1NVVxew89IHxfhPC5DDfvot2rfTUZLQbaOVRWHocYUTBNzIL",
	"yCEROp2W9hsXNZermJ9rcPhc8/kPK07brC5voK2h6WHl8U/xulGscELSokhcXRTgXFlLOfe4OLwbXFwz",
	"KTgRytR4r9D4lxUICUjFckPfBGKTLflltBC8iZCUgAO7yTtmv3hodpBImFvxilAO/RDokgQjQl0RgX2w",
	"vogKS7QaZlkFGHaHi8S6nv9WnBt22C7osrUq3rhyNZc9iB4OjF9E1DKfPqQOf35zUxBKIyl1rfi9QlXq",
	"3A5EhSdXMesX9w/DE7d1ATSdE4GOHL/o4ySq3DlM/l3qHN8dddahvveFOv+broj3G+jahkvNHusgkWln",
	"qrQSqP3OT5JyRrSJ1zM5J6WQCBY4YYoTpy0CH9oLT5Pf3hx23Z8Bs8WMxDsGQU0qTweEXTH/dCB+UDPi",
	"5y4j8YqREW1TXCRdMcJkf63Bzlej3f5ctaF3m+k/sL6Lqq6IqqspWF+JlL4Py4YybXEmRSWQbqOOp0+G",
	"qKPn/v2QW/dFGDKFUlsgDpnFVKUYDuEM2ZaYdFk6+MdB/S5A8tAF71VbDnYZ3nS+zbUXm96y+h+CbS4s",
	"FIHnHzBXgOI+X22Jl42/Hu5yulTv+G7f9jBX0DhnQ691Lu/iBpNeMdziBtPO713zbCgvWZvd+8R8rwAH",
	"aCpaa2/pgWzW7+cXl77H0eoQFb3VBZOEwzVIbSpQmCKgGa2t9Dd7RJOPRtLLzbTD/Nn42Zg2l83fAQAA",
	"//8iSPmcGxgAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
